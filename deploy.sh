#!/bin/bash

# Script de Deploy para Sistema de Manuten√ß√£o
# Autor: Hendel Santos
# Vers√£o: 1.0

set -e  # Parar se houver erro

echo "üöÄ Deploy do Sistema de Manuten√ß√£o"
echo "=================================="

# Verificar se est√° no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

# Fun√ß√£o para instalar depend√™ncias do backend
install_backend() {
    echo "üì¶ Instalando depend√™ncias do Backend..."
    
    # Verificar se Python est√° instalado
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python 3 n√£o encontrado. Instale o Python 3.8+"
        exit 1
    fi
    
    # Criar ambiente virtual se n√£o existir
    if [ ! -d "venv" ]; then
        echo "üîß Criando ambiente virtual..."
        python3 -m venv venv
    fi
    
    # Ativar ambiente virtual
    source venv/bin/activate
    
    # Atualizar pip
    pip install --upgrade pip
    
    # Instalar depend√™ncias
    pip install -r requirements.txt
    
    echo "‚úÖ Backend configurado com sucesso!"
}

# Fun√ß√£o para configurar ambiente
setup_environment() {
    echo "‚öôÔ∏è Configurando ambiente..."
    
    # Copiar arquivo de ambiente se n√£o existir
    if [ ! -f ".env" ]; then
        cp .env.example .env
        echo "üìù Arquivo .env criado. Configure suas vari√°veis de ambiente!"
        echo "   Edite o arquivo .env com suas configura√ß√µes."
    else
        echo "‚úÖ Arquivo .env j√° existe"
    fi
}

# Fun√ß√£o para configurar banco de dados
setup_database() {
    echo "üóÑÔ∏è Configurando banco de dados..."
    
    # Ativar ambiente virtual
    source venv/bin/activate
    
    # Executar migra√ß√µes
    python manage.py makemigrations
    python manage.py migrate
    
    # Criar superusu√°rio se n√£o existir
    echo "üë§ Verificando superusu√°rio..."
    python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(is_superuser=True).exists():
    print('Criando superusu√°rio...')
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('‚úÖ Superusu√°rio criado: admin/admin123')
else:
    print('‚úÖ Superusu√°rio j√° existe')
"
    
    echo "‚úÖ Banco de dados configurado!"
}

# Fun√ß√£o para criar dados de exemplo
create_sample_data() {
    echo "üìä Criando dados de exemplo..."
    
    source venv/bin/activate
    
    if [ -f "create_sample_data.py" ]; then
        python create_sample_data.py
        echo "‚úÖ Dados de exemplo criados!"
    else
        echo "‚ö†Ô∏è Script de dados de exemplo n√£o encontrado"
    fi
}

# Fun√ß√£o para instalar depend√™ncias do Flutter
install_flutter() {
    echo "üì± Configurando Flutter App..."
    
    # Verificar se Flutter est√° instalado
    if ! command -v flutter &> /dev/null; then
        echo "‚ö†Ô∏è Flutter n√£o encontrado. Instale o Flutter para continuar."
        echo "   Visite: https://flutter.dev/docs/get-started/install"
        return 1
    fi
    
    # Navegar para o diret√≥rio do Flutter
    if [ -d "flutter_app" ]; then
        cd flutter_app
        
        # Limpar cache e obter depend√™ncias
        flutter clean
        flutter pub get
        
        # Verificar configura√ß√£o
        flutter doctor
        
        cd ..
        echo "‚úÖ Flutter App configurado!"
    else
        echo "‚ö†Ô∏è Diret√≥rio flutter_app n√£o encontrado"
    fi
}

# Fun√ß√£o para executar testes
run_tests() {
    echo "üß™ Executando testes..."
    
    # Testes do Backend
    echo "Backend Tests:"
    source venv/bin/activate
    python manage.py test
    
    # Testes do Flutter (se dispon√≠vel)
    if [ -d "flutter_app" ] && command -v flutter &> /dev/null; then
        echo "Flutter Tests:"
        cd flutter_app
        flutter test
        cd ..
    fi
    
    echo "‚úÖ Testes conclu√≠dos!"
}

# Fun√ß√£o para iniciar o servidor
start_server() {
    echo "üåê Iniciando servidor de desenvolvimento..."
    
    source venv/bin/activate
    
    # Verificar se a porta est√° livre
    if lsof -Pi :8000 -sTCP:LISTEN -t >/dev/null ; then
        echo "‚ö†Ô∏è Porta 8000 j√° est√° em uso"
        echo "   Finalize o processo existente ou use outra porta"
        exit 1
    fi
    
    # Iniciar servidor
    echo "üöÄ Servidor Django iniciando em http://localhost:8000"
    echo "üì± Para o app m√≥vel, use: http://$(hostname -I | awk '{print $1}'):8000"
    python manage.py runserver 0.0.0.0:8000
}

# Menu principal
show_menu() {
    echo ""
    echo "Escolha uma op√ß√£o:"
    echo "1) üîß Configura√ß√£o completa (recomendado para primeira instala√ß√£o)"
    echo "2) üì¶ Instalar apenas depend√™ncias do Backend"
    echo "3) üì± Configurar Flutter App"
    echo "4) üóÑÔ∏è Configurar banco de dados"
    echo "5) üìä Criar dados de exemplo"
    echo "6) üß™ Executar testes"
    echo "7) üåê Iniciar servidor"
    echo "8) ‚ùå Sair"
    echo ""
}

# Configura√ß√£o completa
full_setup() {
    echo "üîß Iniciando configura√ß√£o completa..."
    install_backend
    setup_environment
    setup_database
    create_sample_data
    install_flutter
    echo ""
    echo "üéâ Configura√ß√£o completa finalizada!"
    echo ""
    echo "Pr√≥ximos passos:"
    echo "1. Edite o arquivo .env com suas configura√ß√µes"
    echo "2. Execute: ./deploy.sh -> op√ß√£o 7 para iniciar o servidor"
    echo "3. Acesse http://localhost:8000/admin (admin/admin123)"
    echo ""
}

# Loop principal
while true; do
    show_menu
    read -p "Digite sua op√ß√£o: " choice
    
    case $choice in
        1)
            full_setup
            ;;
        2)
            install_backend
            ;;
        3)
            install_flutter
            ;;
        4)
            setup_database
            ;;
        5)
            create_sample_data
            ;;
        6)
            run_tests
            ;;
        7)
            start_server
            ;;
        8)
            echo "üëã Tchau!"
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida. Tente novamente."
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
done
