"""
Comando Django para backup autom√°tico do banco de dados
"""
import os
import json
import datetime
from django.core.management.base import BaseCommand
from django.conf import settings
from django.core import serializers
from django.apps import apps


class Command(BaseCommand):
    help = 'Criar backup completo do sistema de manuten√ß√£o'

    def add_arguments(self, parser):
        parser.add_argument(
            '--output-dir',
            type=str,
            default='backups',
            help='Diret√≥rio para salvar o backup'
        )
        parser.add_argument(
            '--format',
            type=str,
            choices=['json', 'xml'],
            default='json',
            help='Formato do backup'
        )

    def handle(self, *args, **options):
        self.stdout.write('üîÑ Iniciando backup do sistema...')
        
        # Criar diret√≥rio de backup
        backup_dir = options['output_dir']
        os.makedirs(backup_dir, exist_ok=True)
        
        # Nome do arquivo com timestamp
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_filename = f'backup_sistema_manutencao_{timestamp}.{options["format"]}'
        backup_path = os.path.join(backup_dir, backup_filename)
        
        try:
            # Obter todos os modelos das apps locais
            local_apps = ['authentication', 'parts', 'locations', 'activities']
            
            backup_data = {
                'metadata': {
                    'created_at': datetime.datetime.now().isoformat(),
                    'version': '1.0.0',
                    'format': options['format'],
                    'apps': local_apps
                },
                'data': {}
            }
            
            for app_name in local_apps:
                self.stdout.write(f'üì¶ Fazendo backup da app: {app_name}')
                app_models = apps.get_app_config(app_name).get_models()
                backup_data['data'][app_name] = {}
                
                for model in app_models:
                    model_name = model._meta.model_name
                    self.stdout.write(f'  üìã Backup do modelo: {model_name}')
                    
                    # Serializar todos os objetos do modelo
                    queryset = model.objects.all()
                    serialized_data = serializers.serialize(options['format'], queryset)
                    
                    if options['format'] == 'json':
                        backup_data['data'][app_name][model_name] = json.loads(serialized_data)
                    else:
                        backup_data['data'][app_name][model_name] = serialized_data
                    
                    count = queryset.count()
                    self.stdout.write(f'    ‚úÖ {count} registros copiados')
            
            # Salvar backup
            with open(backup_path, 'w', encoding='utf-8') as f:
                if options['format'] == 'json':
                    json.dump(backup_data, f, indent=2, ensure_ascii=False, default=str)
                else:
                    f.write(str(backup_data))
            
            # Estat√≠sticas
            file_size = os.path.getsize(backup_path)
            file_size_mb = file_size / (1024 * 1024)
            
            self.stdout.write('üéâ Backup conclu√≠do com sucesso!')
            self.stdout.write(f'üìÅ Arquivo: {backup_path}')
            self.stdout.write(f'üìä Tamanho: {file_size_mb:.2f} MB')
            
            # Listar arquivos de backup existentes
            backup_files = [f for f in os.listdir(backup_dir) if f.startswith('backup_sistema_manutencao_')]
            backup_files.sort(reverse=True)
            
            self.stdout.write(f'üìã Total de backups: {len(backup_files)}')
            if len(backup_files) > 5:
                self.stdout.write('‚ö†Ô∏è  Considere limpar backups antigos')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro durante o backup: {str(e)}')
            )
            return
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Backup finalizado com sucesso!')
        )
