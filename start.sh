#!/bin/bash

# Script de inicializa√ß√£o do Sistema de Manuten√ß√£o
# Executa backend Django e abre op√ß√µes para o frontend Flutter

set -e

PROJECT_DIR="/home/hendel/Documentos/API_aplicativo_relato"
FLUTTER_DIR="$PROJECT_DIR/flutter_app"

echo "üîß Sistema de Manuten√ß√£o - Inicializa√ß√£o"
echo "========================================"

# Fun√ß√£o para verificar se uma porta est√° em uso
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # Porta em uso
    else
        return 1  # Porta livre
    fi
}

# Verificar se o Django j√° est√° rodando
if check_port 8000; then
    echo "‚úÖ Servidor Django j√° est√° rodando na porta 8000"
    
    # Testar se a API est√° respondendo
    if curl -s http://localhost:8000/api/auth/login/ >/dev/null 2>&1; then
        echo "‚úÖ API respondendo corretamente"
    else
        echo "‚ö†Ô∏è  API n√£o est√° respondendo - pode haver um problema"
    fi
else
    echo "üöÄ Iniciando servidor Django..."
    cd "$PROJECT_DIR"
    
    # Verificar se o ambiente virtual existe
    if [ -d "venv" ]; then
        echo "üì¶ Ativando ambiente virtual..."
        source venv/bin/activate
    fi
    
    # Iniciar servidor em background
    python manage.py runserver &
    DJANGO_PID=$!
    
    echo "‚è≥ Aguardando servidor inicializar..."
    sleep 3
    
    # Verificar se o servidor iniciou corretamente
    if check_port 8000; then
        echo "‚úÖ Servidor Django iniciado com sucesso (PID: $DJANGO_PID)"
    else
        echo "‚ùå Falha ao iniciar servidor Django"
        exit 1
    fi
fi

echo ""
echo "üì± Op√ß√µes do Frontend Flutter:"
echo "1) Executar no emulador/dispositivo"
echo "2) Compilar APK Android"
echo "3) Executar vers√£o web"
echo "4) Apenas mostrar informa√ß√µes"
echo "5) Sair"

read -p "Escolha uma op√ß√£o (1-5): " choice

cd "$FLUTTER_DIR"

case $choice in
    1)
        echo "üöÄ Executando Flutter..."
        flutter devices
        echo ""
        echo "üîÑ Iniciando aplicativo..."
        flutter run
        ;;
    2)
        echo "üì¶ Compilando APK..."
        flutter build apk --debug
        echo "‚úÖ APK gerado em: build/app/outputs/flutter-apk/app-debug.apk"
        ;;
    3)
        echo "üåê Executando vers√£o web..."
        flutter run -d web-server --web-port 3000
        ;;
    4)
        echo ""
        echo "üìä Informa√ß√µes do Sistema:"
        echo "========================="
        echo "üîó API Django: http://localhost:8000"
        echo "üîó Admin: http://localhost:8000/admin"
        echo "üîó Documenta√ß√£o: $PROJECT_DIR/README.md"
        echo ""
        echo "üë• Usu√°rios de teste:"
        echo "- admin / admin123 (Administrador)"
        echo "- joao.silva / senha123 (T√©cnico)"
        echo "- maria.santos / senha123 (Supervisora)"
        echo ""
        echo "üõ†Ô∏è Comandos √∫teis:"
        echo "- flutter run (executar app)"
        echo "- flutter build apk (compilar APK)"
        echo "- python manage.py runserver (Django)"
        ;;
    5)
        echo "üëã Saindo..."
        # Se iniciamos o Django, vamos parar ele
        if [ ! -z "$DJANGO_PID" ]; then
            echo "üõë Parando servidor Django..."
            kill $DJANGO_PID 2>/dev/null || true
        fi
        exit 0
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida"
        exit 1
        ;;
esac

echo ""
echo "‚ú® Sistema pronto para uso!"
echo "üìñ Consulte o README.md para mais informa√ß√µes"
